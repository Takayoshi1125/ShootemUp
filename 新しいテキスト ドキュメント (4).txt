トレイルはオブジェクト移動後に沿って描画
→場所の履歴を結んだもの

場所を1フレームごとにとっておいて線としてつなげる

履歴をとるために、動的に増えたり減ったりする配列的なもの

×vector
〇list

コンテナにはメリットデメリットがある

今回は弱点に注目してどれを選ぶか決めたい

弱点
vector:頻繁な要素の追加、削除に弱い
		特に先頭に入れられるのに弱い

list:ランダムアクセスに弱い
	(順番道理のアクセスが一番早い)
	メモリが連続していない

メリット
vector:メモリが連続している
	ランダムが一番早い
list:追加、削除のコストが小さい


迷ったら
vector使おう！動的配列で柔軟に使えるので迷ったらvector
コンテナのインターフェースは似た構造なので途中で
変えようと思えばできる

範囲for文:配列やコンテナ等の複数の要素を全て参照、処理する

文法
for(要素の型名　変数名:コンテナオブジェクト)
{

}

なお、型名はコンテナの要素であることがわかりきっているから
大抵はauto使用
for(auto 変数名:コンテナオブジェクト)
{
}

ただしこの書き方の場合、それぞれの
要素を一時変数にコピーして使ってるにすぎないので
中の値を変えたいときは参考記号&などを用いる

Positn2 lastpos(mx,my);
float thickness=30.0f;
for(const auto& pos:trail)
{
DrawLineAA(lastpos.x,lastpos.y,pos.x,pos.y,0xffffff);
thickness*=0.8f;
lastpos=pos;
}

trail.push_back(position2(mx,my));
trail.size(()<=trail_limit)
{
trail.pop_back()
}